diff --git a/src/epoch/ops.rs b/src/epoch/ops.rs
index 9928853..170ad8e 100644
--- a/src/epoch/ops.rs
+++ b/src/epoch/ops.rs
@@ -17,12 +17,16 @@ use crate::{
     NANOSECONDS_PER_DAY,
 };
 
+#[cfg(feature = "python")]
+use pyo3::prelude::*;
+
 #[cfg(not(feature = "std"))]
 #[allow(unused_imports)] // Import is indeed used.
 use num_traits::Float;
 
 use super::rem_euclid_f64;
 
+#[cfg_attr(feature = "python", pymethods)]
 impl Epoch {
     /// Returns the minimum of the two epochs.
     ///
diff --git a/src/epoch/python.rs b/src/epoch/python.rs
index ab5b01f..52631da 100644
--- a/src/epoch/python.rs
+++ b/src/epoch/python.rs
@@ -415,6 +415,18 @@ impl Epoch {
         }
     }
 
+    /// :rtype: Duration
+    #[getter]
+    fn get_duration(&self) -> PyResult<Duration> {
+        Ok(self.duration)
+    }
+
+    /// :rtype: TimeScale
+    #[getter]
+    fn get_time_scale(&self) -> PyResult<TimeScale> {
+        Ok(self.time_scale)
+    }
+
     /// Get the accumulated number of leap seconds up to this Epoch from the provided LeapSecondProvider.
     /// Returns None if the epoch is before 1960, year at which UTC was defined.
     ///
@@ -484,7 +496,7 @@ impl Epoch {
         let (y, mm, dd, hh, min, s, nanos) =
             Epoch::compute_gregorian(self.duration, TimeScale::UTC);
 
-        let datetime = PyDateTime::new_bound(py, y, mm, dd, hh, min, s, nanos / 1_000, None)?;
+        let datetime = PyDateTime::new(py, y, mm, dd, hh, min, s, nanos / 1_000, None)?;
 
         Ok(datetime)
     }
@@ -504,7 +516,7 @@ impl Epoch {
         // If the user tries to convert a timezone aware datetime into a naive one,
         // we return a hard error. We could silently remove tzinfo, or assume local timezone
         // and do a conversion, but better leave this decision to the user of the library.
-        let has_tzinfo = dt.get_tzinfo_bound().is_some();
+        let has_tzinfo = dt.get_tzinfo().is_some();
         if has_tzinfo {
             return Err(HifitimeError::PythonError {
                 reason: "expected a datetime without tzinfo, call my_datetime.replace(tzinfo=None)"
diff --git a/src/polynomial.rs b/src/polynomial.rs
index 19c1133..b55e045 100644
--- a/src/polynomial.rs
+++ b/src/polynomial.rs
@@ -14,6 +14,8 @@ use serde_derive::{Deserialize, Serialize};
 
 #[cfg(feature = "python")]
 use pyo3::prelude::*;
+#[cfg(feature = "python")]
+use pyo3::types::PyType;
 
 /// Interpolation [Polynomial] used for example in [TimeScale]
 /// maintenance, precise monitoring or conversions.
@@ -38,6 +40,22 @@ pub struct Polynomial {
     pub accel: Duration,
 }
 
+#[cfg_attr(feature = "python", pymethods)]
+impl Polynomial {
+    /// Calculate the correction (as [Duration] once again) from [Self] and given
+    /// the interpolation time interval
+    pub fn correction_duration(&self, time_interval: Duration) -> Duration {
+        let dt_s = time_interval.to_seconds();
+        let (a0, a1, a2) = (
+            self.constant.to_seconds(),
+            self.rate.to_seconds(),
+            self.accel.to_seconds(),
+        );
+        Duration::from_seconds(a0 + a1 * dt_s + a2 * dt_s.powi(2))
+    }
+}
+
+#[cfg(not(feature = "python"))]
 impl Polynomial {
     /// Create a [Polynomial] structure that is only made of a static offset
     pub fn from_constant_offset(constant: Duration) -> Self {
@@ -75,18 +93,6 @@ impl Polynomial {
             accel: Default::default(),
         }
     }
-
-    /// Calculate the correction (as [Duration] once again) from [Self] and given
-    /// the interpolation time interval
-    pub fn correction_duration(&self, time_interval: Duration) -> Duration {
-        let dt_s = time_interval.to_seconds();
-        let (a0, a1, a2) = (
-            self.constant.to_seconds(),
-            self.rate.to_seconds(),
-            self.accel.to_seconds(),
-        );
-        Duration::from_seconds(a0 + a1 * dt_s + a2 * dt_s.powi(2))
-    }
 }
 
 impl fmt::Display for Polynomial {
@@ -100,17 +106,58 @@ impl fmt::Display for Polynomial {
 }
 
 #[cfg(feature = "python")]
-#[pymethods]
+#[cfg_attr(feature = "python", pymethods)]
 impl Polynomial {
-    #[new]
-    fn new_py(constant: Duration, rate: Duration, accel: Duration) -> Self {
+    /// Create a [Polynomial] structure that is only made of a static offset
+    #[classmethod]
+    pub fn from_constant_offset(_cls: &Bound<'_, PyType>, constant: Duration) -> Self {
+        Self {
+            constant,
+            rate: Default::default(),
+            accel: Default::default(),
+        }
+    }
+
+    /// Create a [Polynomial] structure from a static offset expressed in nanoseconds
+    #[classmethod]
+    pub fn from_constant_offset_nanoseconds(_cls: &Bound<'_, PyType>, nanos: f64) -> Self {
+        Self {
+            constant: Duration::from_nanoseconds(nanos),
+            rate: Default::default(),
+            accel: Default::default(),
+        }
+    }
+
+    /// Create a [Polynomial] structure from both static offset and rate of change:
+    #[classmethod]
+    pub fn from_offset_and_rate(
+        _cls: &Bound<'_, PyType>,
+        constant: Duration,
+        rate: Duration,
+    ) -> Self {
         Self {
             constant,
             rate,
-            accel,
+            accel: Default::default(),
         }
     }
 
+    /// Create a [Polynomial] structure from a static offset and drift,
+    /// in nanoseconds and nanoseconds.s⁻¹
+    #[classmethod]
+    pub fn from_offset_rate_nanoseconds(
+        _cls: &Bound<'_, PyType>,
+        offset_ns: f64,
+        drift_ns_s: f64,
+    ) -> Self {
+        Self {
+            constant: Duration::from_nanoseconds(offset_ns),
+            rate: Duration::from_nanoseconds(drift_ns_s),
+            accel: Default::default(),
+        }
+    }
+
+    #[cfg(feature = "python")]
     fn __str__(&self) -> String {
         format!("{self}")
     }
diff --git a/src/python.rs b/src/python.rs
index 13b262c..7bd62b6 100644
--- a/src/python.rs
+++ b/src/python.rs
@@ -17,7 +17,7 @@ use pyo3::{
 use crate::leap_seconds::{LatestLeapSeconds, LeapSecondsFile};
 use crate::prelude::*;
 use crate::ut1::Ut1Provider;
-use crate::MonthName;
+use crate::{MonthName, Polynomial, Weekday};
 
 // Keep the module at the top
 #[pymodule]
@@ -34,6 +34,8 @@ fn hifitime(_py: Python, m: &Bound<'_, PyModule>) -> PyResult<()> {
     m.add_class::<PyHifitimeError>()?;
     m.add_class::<PyDurationError>()?;
     m.add_class::<PyParsingError>()?;
+    m.add_class::<Polynomial>()?;
+    m.add_class::<Weekday>()?;
     Ok(())
 }
 
diff --git a/tests/epoch.rs b/tests/epoch.rs
index 708cfbf..9b9b287 100644
--- a/tests/epoch.rs
+++ b/tests/epoch.rs
@@ -2188,7 +2188,7 @@ fn regression_test_gh_302() {
 
 #[test]
 fn precise_timescale_conversion() {
-    // random GPST Epoch for forward conversion to UTC
+    // Arbitrary GPST Epoch for forward conversion to UTC
     let t_gpst = Epoch::from_gregorian(2020, 01, 01, 0, 0, 0, 0, TimeScale::GPST);
 
     // Let's say we know the GPST-UTC polynomials for that day,
diff --git a/tests/python/test_epoch.py b/tests/python/test_epoch.py
index e34a36b..d79c26c 100644
--- a/tests/python/test_epoch.py
+++ b/tests/python/test_epoch.py
@@ -1,4 +1,4 @@
-from hifitime import Duration, Epoch, HifitimeError, ParsingError, TimeScale, TimeSeries, Unit
+from hifitime import Duration, Epoch, HifitimeError, ParsingError, Polynomial, TimeScale, TimeSeries, Unit, Weekday
 from datetime import datetime, timezone
 import pickle
 
@@ -28,6 +28,9 @@ def test_strtime():
     
     epoch_tdb = epoch.to_time_scale(TimeScale.TDB)
     assert str(epoch_tdb) == "2023-04-13T23:32:26.185636390 TDB"
+    assert epoch_tdb.time_scale == TimeScale.TDB
+
+    assert epoch.next(Weekday.Monday) == Epoch("2023-04-17T23:31:17 UTC")
 
 
 def test_utcnow():
@@ -81,6 +84,7 @@ def test_duration_eq():
     dur = Duration("37 min 26 s")
     assert pickle.loads(pickle.dumps(dur)) == dur
 
+
 def test_epoch_exceptions():
     try:
         Epoch("invalid")
@@ -104,12 +108,14 @@ def test_epoch_exceptions():
     else:
         raise AssertionError("failed to catch as base exception")
 
+
 def test_regression_gh249():
     e = Epoch.init_from_gregorian(year=2022, month=3, day=1, hour=1, minute=1, second=59, nanos=1, time_scale=TimeScale.GPST)
     assert e.strftime("%Y %m %d %H %M %S %f %T") == "2022 03 01 01 01 59 000000001 GPST"
     e = Epoch.init_from_gregorian(year=2022, month=3, day=1, hour=1, minute=1, second=59, nanos=1, time_scale=TimeScale.UTC)
     assert e.strftime("%Y %m %d %H %M %S %f %T") == "2022 03 01 01 01 59 000000001 UTC"
 
+
 def test_interop():
     hifinow = Epoch.system_now()
     lofinow = hifinow.todatetime()
@@ -125,3 +131,26 @@ def test_interop():
         assert False, "tz aware dt did not fail"
     # Repeat after the strip
     assert Epoch.fromdatetime(tz_datetime.replace(tzinfo=None)) == Epoch("2023-10-08 15:30:00")
+
+
+def test_polynomial():
+    t_gpst = Epoch.init_from_gregorian(2020, 1, 1, 0, 0, 0, 0, TimeScale.GPST)
+
+    gpst_utc_polynomials = Polynomial.from_constant_offset_nanoseconds(1.0)
+    gpst_reference = t_gpst - Unit.Hour * 1.0
+    t_utc = t_gpst.precise_timescale_conversion(True, gpst_reference, gpst_utc_polynomials, TimeScale.UTC)
+
+    assert t_utc.time_scale == TimeScale.UTC
+
+    reversed = t_utc.to_time_scale(TimeScale.GPST) + Unit.Nanosecond * 1.0
+    assert reversed == t_gpst
+
+    backwards = t_utc.precise_timescale_conversion(False, gpst_reference, gpst_utc_polynomials, TimeScale.GPST)
+    assert backwards == t_gpst
+
+    gpst_reference = t_gpst - Unit.Minute * 30.0
+    t_utc = t_gpst.precise_timescale_conversion(True, gpst_reference, gpst_utc_polynomials, TimeScale.UTC)
+    assert t_utc.time_scale == TimeScale.UTC
+
+    reversed = t_utc.to_time_scale(TimeScale.GPST) + Unit.Nanosecond * 1.0
+    assert reversed == t_gpst
